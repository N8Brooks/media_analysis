interface Segment {
  segment: string;
  index: number;
  input: string;
  isWordLike: boolean | undefined;
}

declare namespace Intl {
  interface SegmenterOptions {
    granularity?: "grapheme" | "word" | "sentence";
    localeMatcher?: "best fit" | "lookup";
  }

  interface Segments {
    containing(codeUnitIndex: number): Segment;
  }

  interface ResolvedSegmenterOptions {
    locale: string;
    granularity: string;
  }

  interface Segmenter {
    segment(input: string): Iterable<Segment>;
    resolvedOptions(): ResolvedSegmenterOptions;
  }

  const Segmenter: {
    new (locales?: string | string[], options?: SegmenterOptions): Segmenter;
    supportedLocalesOf(
      locales: string | string[],
      options?: Pick<Intl.SegmenterOptions, "localeMatcher">,
    ): string[];
  };
}
